trigger:
  branches:
    include:
      - main
      - develop
      # - feature/*

pr:
  branches:
    include:
      - main
      - develop
      # - feature/*

pool:
  name: 'Self-Hosted-Agent'

# parameters:
#   - name: environment
#     type: string
#     default: ''
#     values:
#       - dev
#       - test
#       - prod

variables:
  - name: env
    ${{ if or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['System.PullRequest.TargetBranch'], 'refs/heads/develop')) }}:
      value: dev
    ${{ if or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['System.PullRequest.TargetBranch'], 'refs/heads/main')) }}:
      value: prod
    ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/') }}:
      value: test

  - name: variable_group
    ${{ if eq(variables['env'], 'dev') }}:
      value: Terraform-Dev
    ${{ if eq(variables['env'], 'test') }}:
      value: Terraform-Test
    ${{ if eq(variables['env'], 'prod') }}:
      value: Terraform-Prod

stages:
- stage: Terraform_Init_Plan
  displayName: "Terraform Init & Plan"
  jobs:
    - job: Terraform_Plan
      displayName: "Run Terraform Init & Plan"
      variables:
        - group: ${{ variables.variable_group }}  # Load environment-specific secrets

      steps:
      - task: AzureCLI@2
        displayName: "Azure Login"
        inputs:
          azureSubscription: "sp_terraform"
          scriptType: "bash"
          scriptLocation: "inlineScript"
          inlineScript: |
            az version

      - task: replacetokens@3
        displayName: "Replace Tokens in Terraform Variable Files"
        inputs:
          rootDirectory: "$(Build.SourcesDirectory)/environments"
          targetFiles: "**/${{ variables.env }}.tfvars"
          encoding: "utf-8"
          writeBOM: true
          actionOnMissing: "fail"
          keepToken: false
          tokenPrefix: "__"
          tokenSuffix: "__"

      - script: |
          #terraform init -backend-config=backend/backend-${{ variables.env }}.tfbackend
          terraform init -reconfigure -backend-config=backend/backend-${{ variables.env }}.tfbackend
        displayName: "Terraform Init"

      - script: |
          terraform validate
        displayName: "Terraform Validate"

      - script: |
          terraform plan -out=tfplan -var-file=environments/${{ variables.env }}.tfvars
        displayName: "Terraform Plan"

      - task: PublishPipelineArtifact@1
        displayName: "Publish Terraform Plan Artifact"
        inputs:
          targetPath: "$(Build.SourcesDirectory)/environments"
          artifactName: ${{ variables.env }}.tfvars

# - stage: Approve_Deployment
#   displayName: "Approval Before Production Deployment"
#   condition: eq(variables['env'], 'prod')  # Only required for production
#   jobs:
#     - job: ManualApproval
#       displayName: "Manual Approval for Production"
#       pool: server
#       steps:
#         - task: ManualValidation@0
#           timeoutInMinutes: 60
#           notifyUsers: ["admin@example.com"]
#           instructions: "Review and approve before proceeding to production deployment."

- stage: Terraform_Apply
  displayName: "Terraform Apply"
  dependsOn: [Terraform_Init_Plan]
  #condition: or(eq(variables['env'], 'dev'), eq(variables['env'], 'test'), and(eq(variables['env'], 'prod'), succeeded('Approve_Deployment')))
  condition: or(eq(variables['env'], 'dev'), eq(variables['env'], 'test'), eq(variables['env'], 'prod'))

  jobs:
    - job: Terraform_Apply
      displayName: "Apply Terraform Changes"
      variables:
        - group: ${{ variables.variable_group }}

      steps:
      - script: |
          terraform init -reconfigure -backend-config=backend/backend-${{ variables.env }}.tfbackend
        displayName: "Terraform Init"
      
      - task: DownloadPipelineArtifact@2
        displayName: "Download Updated Terraform Variable Files"
        inputs:
          artifactName: ${{ variables.env }}.tfvars
          targetPath: "$(Build.SourcesDirectory)/environments"
        
      - script: |
          terraform apply -auto-approve -var-file=environments/${{ variables.env }}.tfvars
        displayName: "Terraform Apply"

      - task: AzureCLI@2
        displayName: "Verify Azure Resources"
        inputs:
          azureSubscription: "sp_terraform"
          scriptType: "bash"
          scriptLocation: "inlineScript"
          inlineScript: |
            az resource list --resource-group $(resource_group_name)
